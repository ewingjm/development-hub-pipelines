parameters:
  - name: templateRepo
    displayName: Template repository alias
    type: string
  - name: envPrepJobs
    displayName: Environment preparation jobs
    type: jobList

variables:
  - group: Development Hub

stages:
  - stage: SetStatusToProvisioning
    displayName: Set environment status to provisioning
    jobs:
      - job: UpdateEnvironment
        displayName: Update environment
        steps:
          - checkout: templateRepo
          - task: PowerShell@2
            displayName: Set environment status
            inputs:
              targetType: filePath
              filePath: scripts/Set-DevHubEnvironmentStatus.ps1
              arguments: >
                -EnvironmentId $env:DEVELOPMENTHUB_EXTRACTENVIRONMENT_RECORDID
                -Status Provisioning
                -Url $env:DEVELOPMENTHUB_DEVELOPMENTENVIRONMENT_URL
            env:
              DEVELOPMENTHUB_APPLICATION_CLIENTSECRET: $(DevelopmentHub.Application.ClientSecret)
  - stage: CreateEnvironment
    displayName: Create environment
    dependsOn: SetStatusToProvisioning
    jobs:
      - job: CreateEnvironment
        displayName: Create environment
        steps:
          - checkout: templateRepo
          - task: PowerShell@2
            displayName: Get development environment details
            inputs:
              targetType: filePath
              filePath: scripts/Get-DataverseEnvironmentDetails.ps1
              arguments: -EnvironmentName $env:DEVELOPMENTHUB_DEVELOPMENTENVIRONMENT_NAME
            env:
              DEVELOPMENTHUB_APPLICATION_CLIENTSECRET: $(DevelopmentHub.Application.ClientSecret)
          - task: PowerShell@2
            displayName: Create the environment
            inputs:
              filePath: scripts/New-DataverseEnvironment.ps1
              arguments: >
                -DisplayName $env:DEVELOPMENTHUB_EXTRACTENVIRONMENT_DISPLAYNAME
                -DomainName "dev-hub-$((Get-FileHash -InputStream ([IO.MemoryStream]::new([byte[]][char[]]"$env:DEVELOPMENTHUB_EXTRACTENVIRONMENT_RECORDID-$env:BUILD_BUILDID-$env:SYSTEM_JOBATTEMPT")) -Algorithm SHA256).Hash.Substring(0, 24).ToLower())"
                -LocationName $env:DEVELOPMENTHUB_DEVELOPMENTENVIRONMENT_LOCATION
                -CurrencyName $env:DEVELOPMENTHUB_DEVELOPMENTENVIRONMENT_CURRENCY
                -LanguageName $env:DEVELOPMENTHUB_DEVELOPMENTENVIRONMENT_LANGUAGE
                -Templates $env:DEVELOPMENTHUB_TARGETSOLUTION_APPTEMPLATES
                -SecurityGroupId $env:DEVELOPMENTHUB_DEVELOPMENTENVIRONMENT_SECURITYGROUPID
            env:
              DEVELOPMENTHUB_APPLICATION_CLIENTSECRET: $(DevelopmentHub.Application.ClientSecret)
            name: createEnvironment
  - stage: PrepareEnvironment
    displayName: Prepare environment
    dependsOn: CreateEnvironment
    variables:
      DevelopmentHub.ExtractEnvironment.Url: $[ stageDependencies.CreateEnvironment.CreateEnvironment.outputs['createEnvironment.DevelopmentHub.ExtractEnvironment.Url'] ]
      DevelopmentHub.ExtractEnvironment.Name: $[ stageDependencies.CreateEnvironment.CreateEnvironment.outputs['createEnvironment.DevelopmentHub.ExtractEnvironment.Name'] ]
      BuildTools.EnvironmentUrl: $[ stageDependencies.CreateEnvironment.CreateEnvironment.outputs['createEnvironment.DevelopmentHub.ExtractEnvironment.Url'] ]
    jobs:
      - job: GetCommitHash
        displayName: Get commit hash
        steps: 
          - powershell: Write-Host "##vso[task.setvariable variable=commitHash;isoutput=true]$(git rev-parse HEAD)"
            displayName: Get commit hash
            name: getCommitHash
            workingDirectory: $(Build.SourcesDirectory)
      - ${{ parameters.envPrepJobs }}
      # This is required because it's not possible to get the stage status as a variable in the next stage
      - job: SetSuccessVariable
        displayName: Set success variable
        dependsOn:
          - ${{ each job in parameters.envPrepJobs }}:
            - ${{ job.job }}
        condition: and(not(canceled()), not(failed()))
        steps:
          - checkout: none
          - powershell: Write-Host "##vso[task.setvariable variable=success;isoutput=true]true"
            displayName: Set variable
            name: setVariable
  - stage: SetStatusToResult
    displayName: Set environment status to result
    condition: succeededOrFailed()
    dependsOn:
      - CreateEnvironment
      - PrepareEnvironment
    variables:
      DevelopmentHub.Provision.Success: $[ eq(stageDependencies.PrepareEnvironment.SetSuccessVariable.outputs['setVariable.success'], 'true') ]
      DevelopmentHub.ExtractEnvironment.CommitHash: $[ stageDependencies.PrepareEnvironment.GetCommitHash.outputs['getCommitHash.commitHash'] ]
      DevelopmentHub.ExtractEnvironment.Url: $[ stageDependencies.CreateEnvironment.CreateEnvironment.outputs['createEnvironment.DevelopmentHub.ExtractEnvironment.Url'] ]
    jobs:
      - job: UpdateEnvironment
        displayName: Update environment
        steps:
          - checkout: templateRepo
          - task: PowerShell@2
            displayName: Set environment status
            inputs:
              targetType: filePath
              filePath: scripts/Set-DevHubEnvironmentStatus.ps1
              arguments: >
                -EnvironmentId $env:DEVELOPMENTHUB_EXTRACTENVIRONMENT_RECORDID
                -Status $(if ([System.Convert]::ToBoolean($env:DEVELOPMENTHUB_PROVISION_SUCCESS) -eq $true) { "Ready" } else { "FailedToProvision" })
                -Url $env:DEVELOPMENTHUB_DEVELOPMENTENVIRONMENT_URL
                -EnvironmentCommitHash $env:DEVELOPMENTHUB_EXTRACTENVIRONMENT_COMMITHASH
                -EnvironmentUrl $env:DEVELOPMENTHUB_EXTRACTENVIRONMENT_URL
            env:
              DEVELOPMENTHUB_APPLICATION_CLIENTSECRET: $(DevelopmentHub.Application.ClientSecret)